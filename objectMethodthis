SHORT HAND USAGE OF METHODS INSIDE JAVASCRIPT OBJECTS::

let obj = {
  sayHi:function(){
    return true;
    }
    }
    
    Instead of this we can use ::
    
    let obj = {
      sayHi() {
        return "Hi"
        }
        }
        
        
 "this" ::
 
 this refers to the key written before the dot notation  while accessing the available values from object properties..
 
ex:
   var obj= {
     name: "nazia",
     sayHi() {
       return this.name;   // this usage gives the this as obj.name properties value.
       }
       }
       
       NOTE***
       
       -If we overwrite the objects reference name with say null and then instead of accessing its property using this we write obj.name 
       
       then it would throw an error.
       Hence, use this while accessing the properties and also create the reference of the same.
       
       The value of this is not bound to any function its value comes dynamically from the objects.
       
       Summary
Functions that are stored in object properties are called “methods”.
Methods allow objects to “act” like object.doSomething().
Methods can reference the object as this.
The value of this is defined at run-time.

When a function is declared, it may use this, but that this has no value until the function is called.
That function can be copied between objects.
When a function is called in the “method” syntax: object.method(), the value of this during the call is object.
Please note that arrow functions are special: they have no this. When this is accessed inside an arrow function, it is taken from outside.

Test::::
Here’s the explanations.

That’s a regular object method call.

The same, brackets do not change the order of operations here, the dot is first anyway.

Here we have a more complex call (expression).method(). The call works as if it were split into two lines:

f = obj.go; // calculate the expression
f();        // call what we have
Here f() is executed as a function, without this.

The similar thing as (3), to the left of the dot . we have an expression.

To explain the behavior of (3) and (4) we need to recall that property accessors (dot or square brackets) return a value of the Reference Type.

Any operation on it except a method call (like assignment = or ||) turns it into an ordinary value, which does not carry the information 
allowing to set this.




Create a calculator
importance: 5
Create an object calculator with three methods:

read() prompts for two values and saves them as object properties.
sum() returns the sum of saved values.
mul() multiplies saved values and returns the result.

Solution:::

let calculator = {
  sum() {
    return this.a + this.b;
  },

  mul() {
    return this.a * this.b;
  },

  read() {
    this.a = +prompt('a?', 0);
    this.b = +prompt('b?', 0);
  }
};

calculator.read();
alert( calculator.sum() );
alert( calculator.mul() );


